FORMAT: 1A
HOST: http://localhost:8081/

# Nutchpy to Nutch REST API

This API incorporates the functions of NutchPy (https://github.com/ContinuumIO/nutchpy) 
into the Nutch REST service.

## Group Reader

This provides an endpoint to read the various files generated by Nutch.

## Sequence File Reader [/reader/sequence]

This is a general reader for any type of sequence file.

### Read entire contents of a file [GET/reader/sequence/read]

+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-SEQ-FILE>/data"
        }
        
+ Response 200 (application/json)

        { [
        [line1],
        [line2],
        [line3], 
        .....
        ] }

### Read a given number of rows from start [GET/reader/sequence/read{?nrows}]

+ Parameter
    + nrows: 10 (optional, number) - The number of rows to read from the start of the file
    
+ Request (application/json)

        {
            "path": "<FULL-PATH>/data", 
        }

+ Response 200 (application/json)
        
        {[ 
        [line1], 
        [line2], 
        .....,
        [line n]
        ]}

### Read a slice of the file [GET/reader/sequence/read{?start,end}]

+ Parameter
    + start: 5 (optional, number) - Row to start reading from 
    + end: 10 (optional, number) - Number of the row to read the file till
    
+ Request (application/json)

        {
            "path": "<FULL-PATH>/data", 
        }

+ Response 200 (application/json)
        
        {[ 
        [start line], 
        [line2], 
        ....., 
        [end line]
        ]}

### Get the total count of number of rows in the file [GET /reader/sequence/read{?count}]

+ Parameter 
    + count: true (required, boolean) 

+ Request (application/json)

        {
            "path": "<FULL-PATH>/data", 
        }

+ Response 200 (text/plain)
        
        100


## Node Reader [/reader/node]

The node reader reads a nodes from the Nutch webgraph. 

### Get schema of Node reader response [GET]

+ Response 200 (application/json)
        
        {
            "key_url":"string",
            "num_inlinks": "int", 
            "num_outlinks": "int",
            "inlink_score": "float", 
            "outlink_score": "float", 
            "metadata": "string"
        }

### Read all nodes from file [GET/reader/node/read]

+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-NODE-FILE>/data"
        }
        
+ Response 200 (application/json)

        {
        {node1},
        {node2},
        {node3}, 
        .....
        }

### Read a given number of nodes from start [GET/reader/node/read{?nrows}]

+ Parameter
    + nrows: 10 (optional, number) - The number of nodes to read from the start of the file
    
+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-NODE-FILE>/data", 
        }

+ Response 200 (application/json)
        
        {
        {node1},
        {node2},
        {node3}, 
        ....., 
        {nodeN}
        }

### Read a slice of the file [GET/reader/node/read{?start,end}]

+ Parameter
    + start: 5 (optional, number) - Row to start reading from 
    + end: 10 (optional, number) - Number of the row to read the file till
    
+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-NODE-FILE>/data", 
        }

+ Response 200 (application/json)
        
        {
        {start node},
        {node2},
        {node3}, 
        ....., 
        {end node}
        }

### Get the total count of number of nodes in the file [GET /reader/node/read{?count}]

+ Parameter 
    + count: true (required, boolean) 

+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-NODE-FILE>/data", 
        }

+ Response 200 (text/plain)
        
        100


## Link Reader [/reader/link]

The link reader reads a link from the Nutch webgraph.

### Get schema of link reader response [GET/reader/link]

+ Response 200 (application/json)
        
        {
            "key_url":"string",
            "url": "string", 
            "anchor": "string",
            "score": "float", 
            "timestamp": "int", 
            "linktype": "string"
        }

### Read all links from the file [GET/reader/link/read]

+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-LINK-FILE>/data"
        }
        
+ Response 200 (application/json)

        {
        {link1},
        {link2},
        {link3}, 
        .....
        }

### Read a given number of links from start [GET/reader/link/read{?nrows}]

+ Parameter
    + nrows: 10 (optional, number) - The number of rows to read from the start of the file
    
+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-LINK-FILE>/data", 
        }

+ Response 200 (application/json)
        
        {
        {link1},
        {link2},
        {link3}, 
        ....., 
        {linkN}
        }

### Read a slice of the file [GET/reader/link/read{?start,end}]

+ Parameter
    + start: 5 (optional, number) - Row to start reading from 
    + end: 10 (optional, number) - Number of the row to read the file till
    
+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-LINK-FILE>/data", 
        }

+ Response 200 (application/json)
        
        {
        {start link},
        {link2},
        {link3}, 
        ....., 
        {end link}
        }

### Get the total count of number of links in the file [GET /reader/link/read{?count}]

+ Parameter 
    + count: true (required, boolean) 

+ Request (application/json)

        {
            "path": "<FULL-PATH-TO-LINK-FILE>/data", 
        }

+ Response 200 (text/plain)
        
        100

